#name: Build
#
#on:
#
#  # (optional) run workflow manually.
#  workflow_dispatch:
#  push:
#    branches:
#      - master
#  pull_request:
#    branches:
#      - master
#
#jobs:
#  build:
#    # set the job to run on the platform specified by the matrix below.
#    runs-on: ${{ matrix.runner }}
#
#    # define the build matrix for cross-compilation.
#    strategy:
#      matrix:
#        include:
#          - name: linux-amd64
#            runner: ubuntu-22.04
#            target: x86_64-unknown-linux-gnu
#
#    # the steps to run for each matrix item
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@stable
#        with:
#          targets: "${{ matrix.target }}"
#
#      - name: Setup Cache
#        uses: Swatinem/rust-cache@v2
#
#      - name: Build Binary
#        run: cargo build --verbose --locked --release --target ${{ matrix.target }}
#
#      - name: Release Binary
#        shell: bash
#        run: |
#          BIN_SUFFIX=""
#          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
#            BIN_SUFFIX=".exe"
#          fi
#
#          # The built binary output location
#          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"
#
#          # Define a better name for the final binary
#          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
#          BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"
#
#          # Move the built binary where you want it
#          mv "${BIN_OUTPUT}" "./<your-destination>/${BIN_RELEASE}"